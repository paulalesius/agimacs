#+PROPERTY: header-args :tangle no
#+PROPERTY: header-args:emacs-lisp+ :comments link

* Pauls Literate Emacs Config
** Early Initialization
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.custom/early-init.el
:END:

*** To prevent package.el from loading packages prior to their init-file loading (with straight.el? What init file?)
#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
(setq hello2 t)
#+END_SRC

*** Defer compilation of LISP files
When using gccemacs
#+BEGIN_SRC emacs-lisp
(setq comp-deferred-compilation t)
#+END_SRC

*** Garbage collection during boot
Emacs starts up with a relatively low garbage collection limit to speed up load time.
We can optimize this by increasing the limit during initialization.
#+BEGIN_SRC emacs-lisp
(setq old-gc-cons-threshold gc-cons-threshold)
(setq gc-cons-threshold most-positive-fixnum)
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold old-gc-cons-threshold)))
#+END_SRC

*** Configure straight.
Make every (use-package) also invoke straight.el making specifying ":straight t" unnecessary.

#+BEGIN_SRC emacs-lisp
(setq straight-use-package-by-default t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** Startup stats
#+BEGIN_SRC emacs-lisp
;; Startup hook from https://config.daviwil.com/emacs
(add-hook 'emacs-startup-hook
  (lambda ()
    (message "*** Ready for business. Startup in %s with %d gcs."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done)))
#+END_SRC

** Initialization
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.custom/init.el
:END:
*** Platform
**** use-package.el
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
#+END_SRC
**** Built-in packages
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (savehist-mode)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Enable recentf mode
  (recentf-mode 1)
  (setq recentf-max-menu-items 100
        recentf-max-saved-items 100)

  ;; Misc tweaks
  (menu-bar-mode -1)
  (tool-bar-mode -1))
#+END_SRC

*** Infrastructure
**** doom-themes.el
This will install Doom Themes megapack, a collection of themes. And load the doom-one theme. The (doom-themes-visual-bell-config) is documented that it may potentially not work with all modelines, but we keep it simple with doom modeline.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  :config
  (load-theme 'doom-one t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+END_SRC

**** evil.el and evil-collections.el
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :custom
  (evil-collection-setup-minibuffer t)
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

**** general.el
For easier key binding definitions.
#+BEGIN_SRC emacs-lisp
(use-package general
  :after evil
  :config
  (general-create-definer my-leader-def
    :prefix "SPC"
    :states '(normal visual))
  (my-leader-def
   "ff" 'find-file
   "fr" 'recentf-open-files

    ;; flycheck
   "cn" 'flycheck-next-error
   "cp" 'flycheck-previous-error
   "cl" 'flycheck-list-errors

    ;; help
   "hk" 'describe-key
   "hm" 'describe-mode
   "hv" 'describe-variable

    ;; buffer
   "bd" 'kill-current-buffer

    ;; projectile
   "pp" 'projectile-switch-project))
#+END_SRC

**** projectile.el
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+END_SRC

**** doom-modeline.el
Also make sure to load the modeline after projectile since it uses the projectile api.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  (setq doom-modeline-project-detection 'projectile
        doom-modeline-buffer-file-name-style 'truncate-upto-project)
  :config
  :hook (after-init . doom-modeline-mode))
#+END_SRC

**** which-key.el
Since we're n00bs, we need to see the key options sometimes.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :after evil
  :init
  (setq which-key-idle-delay 0.4)
  :config
  (which-key-mode)
  (which-key-setup-minibuffer))
#+END_SRC

*** Completions
**** vertico.el
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+END_SRC
**** orderless.el
Basically, we want to select items orderless instead of matching completions from beginning to end?
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

*** Languages
**** lsp-mode.el and lsp-ui.el
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook
  (python-mode . lsp-deferred)
  :init
  (setq lsp-clients-python-command "pylsp"
        lsp-enable-snippet nil
        lsp-headerline-breadcrumb-enable nil)
  :config
  (lsp-enable-which-key-integration t))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :custom
  ;; lsp-ui-doc
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-doc-show-with-mouse nil)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-position 'at-point "Doesn't seem to work either. Childframes or WebKit frames require GUI widgets.")
  ;; lsp-ui-sideline
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-diagnostics t)
  (lsp-ui-sideline-show-code-actions t)
  :commands lsp-ui-mode
  :hook
  (lsp-mode . lsp-ui-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :commands company-lsp)
#+END_SRC

**** flycheck.el
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :after lsp-mode
  ;;:hook (lsp-mode . flycheck-mode)
  :init
  (setq flycheck-check-syntax-automatically '(mode-enabled save idle-change)
        flycheck-idle-change-delay 0.8)
  :config
  (global-flycheck-mode t))
#+END_SRC

**** python.el
Is provided by emacs, so ensure nil
#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil)
  ;;:config
  ;; IPython REPL. I use a terminal mainly so there's no need for ipython(?)
  ;;(setq python-shell-interpreter "ipython"
  ;;      python-shell-interpreter-args "-i --simple-prompt"))
#+END_SRC
