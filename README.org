#+PROPERTY: header-args :tangle no
#+PROPERTY: header-args:emacs-lisp+ :comments link

# BEGIN_TOC 3
- 1 [[*pauls-emacs][Paul's Emacs]]
- 1.1 [[*early-initialization-early-initel][Early Initialization (early-init.el)]]
- 1.1.1 [[*boot-gc][Boot gc]]
- 1.1.2 [[*straightel][straight.el]]
- 1.1.3 [[*use-packageel][use-package.el]]
- 1.2 [[*initialization-initel][Initialization (init.el)]]
- 1.2.2 [[*infrastructure][Infrastructure]]
- 1.2.3 [[*completions][Completions]]
- 1.2.4 [[*languages-common][Languages Common]]
- 1.2.5 [[*python-mode][Python Mode]]
- 1.2.6 [[*rust-mode][Rust Mode]]
- 1.2.7 [[*org-mode][Org Mode]]
- 1.2.8 [[*yaml-mode][YAML Mode]]
- 1.2.9 [[*agi-mode][AGI Mode]]
- 2 [[*on-save-readmeorg][On save (README.org)]]
# END_TOC

* Paul's Emacs
I come from Doom Emacs but it becomes very hard to trace issues when there are so many packages and opinionated configurations changing the default behaviors of packages, and I'm not sure what has changed from the defaults using distributions such as Doom. So I decided to write my own configuration from scratch, based on Doom, for instance using Doom Themes and Doom Modeline, which are very nice overall.

This file is using "org-tangle" metadata, so pressing C-c C-v C-t will generate three files, early-init.el, init.el, and .dir-locals.el. Each generated file has its own top level headline.

- Package manager: use-package.el backed by straight.el
- Key bindings: evil.el configured with general.el
- Completions: vertico
- Languages: Python, Rust
  
** Early Initialization (early-init.el)
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.custom/early-init.el
:END:

Enable profiling when EMACS_PROFILE is set to "true"
#+BEGIN_SRC emacs-lisp
  (when (string-equal (getenv "EMACS_PROFILE") "true")
    (setq garbage-collection-messages t)
    (profiler-start 'cpu+mem))
#+END_SRC

To prevent package.el from loading packages prior to their init-file loading (with straight.el? What init file?)
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
#+END_SRC

Custom variables are written to custom-file, set this to something other than init.el because this file is generated.
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

*** Boot gc
Emacs starts up with a relatively low garbage collection limit to speed up load time.
We can optimize this by increasing the limit during initialization.

Startup hook from https://config.daviwil.com/emacs 
#+BEGIN_SRC emacs-lisp
  (setq old-gc-cons-threshold gc-cons-threshold
        gc-cons-threshold most-positive-fixnum)
  (add-hook 'emacs-startup-hook
            (lambda () (setq gc-cons-threshold old-gc-cons-threshold)))
  (add-hook 'emacs-startup-hook
  	  (lambda ()
  	    (message "Ready for business. Startup in %s with %d gcs."
  		     (format "%.2f seconds"
  			     (float-time
  			      (time-subtract after-init-time before-init-time)))
  		     gcs-done)))
#+END_SRC

Disable profiling when running with EMACS_PROFILE=true
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (when (string-equal (getenv "EMACS_PROFILE") "true")
                (profiler-stop)
                (let ((profiler-report-file (expand-file-name "profiler-report.txt" user-emacs-directory)))
                  (with-current-buffer (profiler-report-cpu)
                    (write-file profiler-report-file))
                  (message "Profiler report saved to %s" profiler-report-file)))))
#+END_SRC

*** straight.el

Make every (use-package) also invoke straight.el making specifying ":straight t" unnecessary.
#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t
        straight-process-buffer " *straight-process*")
#+END_SRC

Bootstrap straight.el
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

Font-lock the "straight-use-package" symbol.
#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords 'emacs-lisp-mode
  			'(("(\\(straight-use-package\\)\\_>"
                             (1 'font-lock-keyword-face))))
#+END_SRC

*** use-package.el
Stright doesn't support :init and :config and other attributes, so use-package.
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
#+END_SRC

** Initialization (init.el)
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.custom/init.el
:END:

Keys are mapped using general.el in the use-project for the respective module. So nearly all packages will depend on general.el.

Don't allow cursor in minibuffer. Command completions excludes commands not available in active modes(?)
**** Core
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)
          read-extended-command-predicate #'command-completion-default-include-p
          enable-recursive-minibuffers t
          recentf-max-menu-items 100
          recentf-max-saved-items 100)

    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    (savehist-mode)
    (recentf-mode 1)
    (menu-bar-mode -1)
    (tool-bar-mode -1))
#+END_SRC

*** Infrastructure
**** doom-themes.el
This will install Doom Themes megapack, a collection of themes. And load the doom-one theme. The (doom-themes-visual-bell-config) is documented that it may potentially not work with all modelines, but we keep it simple with doom modeline.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  :config
  (load-theme 'doom-one t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+END_SRC

**** evil.el and evil-collections.el
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+END_SRC

Depend on magit to configure evil for magit too
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after (evil magit)
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))
#+END_SRC

**** general.el
For easier key binding definitions.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :after evil
    :config

    (general-create-definer my-leader-def
      :prefix "SPC"
      :states '(normal visual))

    (my-leader-def
      "f" '(:ignore t :which-key "file")
      "f f" 'find-file

      "e" '(:ignore t :which-key "emacs")
      "e c" '((lambda ()
      	      (interactive)
        	      (find-file (expand-file-name "README.org" user-emacs-directory)))
      	    :which-key "README.org")

      "c" '(:ignore t :which-key "code")
      "c n" 'flycheck-next-error
      "c p" 'flycheck-previous-error
      "c l" 'flycheck-list-errors

      "b" '(:ignore t :which-key "buffer")
      "b d" 'kill-current-buffer)
  
    (my-leader-def
      :keymaps 'smerge-mode-map
      "g s" '(:ignore t :which-key "smerge")
      "g s n" 'smerge-next
      "g s p" 'smerge-prev
      "g s d" 'smerge-diff-base
      "g s u" 'smerge-keep-upper
      "g s l" 'smerge-keep-lower))
#+END_SRC

**** projectile.el
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :after general
    :config
    (projectile-mode +1)
    (my-leader-def
      :keymaps 'projectile-mode-map
      "p" '(:ignore t :which-key "projectile")
      "p a" 'projectile-add-known-project
      "p d" 'projectile-remove-known-project
      "p p" 'projectile-switch-project
      "p f" 'projectile-find-file
      "p i" 'projectile-invalidate-cache
      "p k" 'projectile-kill-buffer))
#+END_SRC
Also has some sort of projectile-mode-map for full projectile menu
(use-package projectile
    :bind (:map projectile-mode-map
            ("s-p" . projectile-command-map)
            ("C-c p" . projectile-command-map))))


**** doom-modeline.el
Also make sure to load the modeline after projectile since it uses the projectile api.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :custom
    (doom-modeline-project-detection 'project)
    (doom-modeline-buffer-file-name-style 'relative-to-project)
    (doom-modeline-unicode-fallback t)
    (doom-modeline-minor-modes nil)
    :hook (after-init . doom-modeline-mode))
#+END_SRC

**** which-key.el
Since we're n00bs, we need to see the key options sometimes.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :after evil
  :init
  (setq which-key-idle-delay 0.4)
  :config
  (which-key-mode)
  (which-key-setup-minibuffer))
#+END_SRC

**** magit.el and magit-todos.el
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :after evil
    :config
    (my-leader-def
      "g" '(:ignore t :which-key "magit")
      "g g" 'magit-status
      "g t" 'magit-todos-list))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package magit-todos
  :after magit
  :custom
  (magit-todos-keyword-suffix "\\(?:([^)]+)\\)?:?" "Allow TODO without colons TODO:"))
#+END_SRC
**** dashboard.el
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :custom
    (org-agenda-files (append
			(directory-files-recursively "/storage/src/unnsvc/cases/" "\\.org$")
			'()))
    :config
    ;;(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (dashboard-setup-startup-hook))
#+END_SRC

**** lookup.el
Doom emacs seems to do a lot more, this doesn't seem to work in this config to lookup "use-package" but it works in Doom Emacs. Investigate.
#+BEGIN_SRC emacs-lisp
(use-package lookup
  :straight (lookup :type git :host github :repo "aaronjensen/emacs-lookup")
  :after general
  :config
  (my-leader-def
    "c h" #'+lookup/documentation))
#+END_SRC

**** helpful.el
More helpful help
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :after general
    :config
    (general-define-key
     :prefix "C-c"
     "C-d" #'helpful-at-point)
    (general-define-key
     :prefix "C-h"
     "k" #'helpful-key
     "o" #'helpful-symbol
     "v" #'helpful-variable
     "x" #'helpful-command
     "F" #'helpful-function
     "f" #'helpful-callable)
  
    ;; Unbind default Emacs C-h keys to reduce clutter
    (let ((keys-to-unbind '("h" "g" "n" "i" "t" "r" "L" "<f1>" "C-a" "C-e" "C-f"
  			  "C-c" "C-d" "C-h" "C-p" "C-o" "C-n" "C-t" "C-w" "RET")))
      (dolist (key keys-to-unbind)
              (general-define-key :prefix "C-h" key nil))))
#+END_SRC

*** Completions
**** vertico.el
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+END_SRC
**** orderless.el
Basically, we want to select items orderless instead of matching completions from beginning to end?
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :after vertico
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC
**** consult.el and consult-flycheck.el
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :after general
    :config
    (my-leader-def
     "b b" #'consult-buffer
     "f r" #'consult-recent-file)
    ;; Re-define keys
    (general-define-key
     :prefix "C-x"
     "b" #'consult-buffer))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package consult-flycheck
  :after (consult flycheck))
#+END_SRC

*** Languages Common
**** lsp-mode.el and lsp-ui.el
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-clients-python-command "pylsp"
        lsp-enable-snippet nil
        lsp-headerline-breadcrumb-enable nil)
  :config
  (lsp-enable-which-key-integration t))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :custom
  ;; lsp-ui-doc
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-doc-show-with-mouse nil)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-position 'at-point "Doesn't seem to work either. Childframes or WebKit frames require GUI widgets.")
  ;; lsp-ui-sideline
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-diagnostics t)
  ;; I dont' know what code actions are
  ;;(lsp-ui-sideline-show-code-actions t)
  :commands lsp-ui-mode
  :hook
  (lsp-mode . lsp-ui-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :commands company-lsp)
#+END_SRC

**** flycheck.el
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :after lsp-mode
  ;;:hook (lsp-mode . flycheck-mode)
  :init
  (setq flycheck-check-syntax-automatically '(mode-enabled save idle-change)
        flycheck-idle-change-delay 0.8)
  :config
  (global-flycheck-mode t))
#+END_SRC

**** rainbow-delimiters.el
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

**** format-all.el
So essentially, use-package will pull an old version of format-all.el. But a new version still doesn't work for
org-mode. Doom Emacs uses a modified version that uses el-patch to format source blocks in org. one can however,
still use "C-c '", which brings up a buffer with the source code inside of the code block, the formatter should
work on this, so you press "C-c '" again in that buffer to go back to org mode with a formatted code block.

#+BEGIN_SRC emacs-lisp
(use-package format-all
  :straight (:type git :host github :repo "lassik/emacs-format-all-the-code"))
#+END_SRC

**** utilify functions
Common methods extracted from doom-modeline to show the current pyvenv environment.
#+BEGIN_SRC emacs-lisp
  (defun +modeline-update-env-in-all-windows-h (&rest _)
    "Update version strings in all buffers."
    (dolist (window (window-list))
      (with-selected-window window
        (when (fboundp 'doom-modeline-update-env)
          (doom-modeline-update-env))
        (force-mode-line-update))))

  (defun +modeline-clear-env-in-all-windows-h (&rest _)
    "Blank out version strings in all buffers."
      (dolist (buffer (buffer-list))
        (with-current-buffer buffer
          (setq doom-modeline-env--version
                (bound-and-true-p doom-modeline-load-string))))
    (force-mode-line-update t))
#+END_SRC

*** Python Mode
**** python.el
Is provided by emacs, so ensure nil
#+BEGIN_SRC emacs-lisp
  (defun setup-python-mode-keybindings()
    (my-leader-def
      :keymaps 'python-mode-map
      "m s" '(:ignore t :which-key "REPL")
      ;; REPL
      "m s r" '(python-shell-send-region :which-key "send region")
      "m s b" '(python-shell-send-buffer :which-key "send buffer")
      "m s f" '(python-shell-send-file :which-key "send file")))
  
  (use-package python
    :mode ("[./]pyproject.toml\\'" . conf-mode)
    :after (general projectile lsp-mode flycheck)
    :hook (python-mode . lsp-deferred)
    :hook (python-mode . #'setup-python-mode-keybindings)
    :custom
    (python-indent-guess-indent-offset-verbose nil "Don't emit warning when indent guessing fails")
    :config
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3"))

    (add-hook 'python-mode-hook
              (defun +python-use-correct-flycheck-executables-h ()
                "Use the correct Python executables for Flycheck."
                (let ((executable python-shell-interpreter))
          	(save-excursion
          	  (goto-char (point-min))
          	  (save-match-data
          	    (when (or (looking-at "#!/usr/bin/env \\(python[^ \n]+\\)")
          		      (looking-at "#!\\([^ \n]+/python[^ \n]+\\)"))
          	      (setq executable (substring-no-properties (match-string 1))))))
          	;; Try to compile using the appropriate version of Python for
          	;; the file.
          	(setq-local flycheck-python-pycompile-executable executable)
          	;; We might be running inside a virtualenv, in which case the
          	;; modules won't be available. But calling the executables
          	;; directly will work.
          	(setq-local flycheck-python-pylint-executable "pylint")
          	(setq-local flycheck-python-flake8-executable "flake8")))))
#+END_SRC

**** pyenv.el
Needs to be configured this way for some reason, as setting :hook doesn't work
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :after (doom-modeline python)
  :init
  (add-hook 'pyvenv-post-activate-hooks #'+modeline-update-env-in-all-windows-h)
  (add-hook 'pyvenv-post-deactivate-hooks #'+modeline-clear-env-in-all-windows-h)
  :config
  (add-hook 'python-mode-local-vars-hook #'pyvenv-track-virtualenv)
  (add-to-list 'global-mode-string
               '(pyvenv-virtual-env-name (" venv:" pyvenv-virtual-env-name " "))))
#+END_SRC

**** poetry.el
Needs to be configured this way for some reason as setting :hook or :after pyvenv
doesn't activate poetry-tracking-mode
#+BEGIN_SRC emacs-lisp
  (use-package poetry
    :after (python pyvenv)
    :custom
    (poetry-tracking-strategy 'switch-buffer)
    :init
    (add-hook 'python-mode-hook #'poetry-tracking-mode)
    :config
    (my-leader-def
      :keymaps 'python-mode-map
      "m p" '(:ignore t :which-key "poetry")
      "m p p" #'poetry))
#+END_SRC

**** pytest.el
#+BEGIN_SRC emacs-lisp
  (use-package pytest
    :after python
    :config
    (my-leader-def
      :keymaps 'python-mode-map
      "m t" '(:ignore t :which-key "pytest")
      ;; Testing
      "m t a" #'pytest-all
      "m t m" #'pytest-module
      "m t c" #'pytest-one
      "m t r" #'pytest-again
      "m t d" #'pytest-directory
      ))
#+END_SRC

*** Rust Mode
**** rustic.el
#+BEGIN_SRC emacs-lisp
  (use-package rustic
    :after (flycheck org lsp-mode rainbow-delimiters)
    :mode ("\\.rs$" . rustic-mode)
    :mode ("^Cargo\\.toml$" . rustic-mode)
    :preface
    (setq rustic-lsp-client nil)
    (with-eval-after-load 'rustic-lsp-client
      (remove-hook 'rustic-mode-hook 'rustic-setup-lsp))
    (with-eval-after-load 'rustic-flycheck
      (remove-hook 'rustic-mode-hook #'flycheck-mode)
      (remove-hook 'rustic-mode-hook #'flycheck-mode-off)
      (remove-hook 'flycheck-mode-hook #'rustic-flycheck-setup))
    (add-hook 'rustic-mode-hook #'rainbow-delimiters-mode)
    (setq rustic-indent-method-chain t)
    (setq rust-prettify-symbols-alist nil)
    (setq rustic-babel-format-src-block nil
  	rustic-format-trigger nil)
    (setq rustic-lsp-client 'lsp-mode)
    (add-hook 'rustic-mode-local-vars-hook #'rustic-setup-lsp 'append))
#+END_SRC

*** Org Mode
**** org.el
    #+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-hide-leading-stars t)
  (org-hide-emphasis-markers t)
  (org-startup-indented t)
  (org-enforce-todo-dependencies t)
  ;; Defaults to showeverything, but that doesn't respect `org-hide-block-startup'
  ;; (#+startup: hideblocks)`, archive trees, hidden drawers, or VISIBILITY properties. nil
  ;; is equivalent, but respects these settings.
  (org-startup-folded nil))
    #+END_SRC
**** evil-org.el
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after (evil org)
  :hook (org-mode . evil-org-mode)
  :hook (org-capture-mode . evil-insert-state)
  :hook (doom-docs-org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook #'evil-normalize-keymaps)
  (evil-org-set-key-theme))
#+END_SRC
**** org-bullets.el
Nice bullet icons for headlines and such, supports unicode fallback
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

# +END_SRC
# **** evil-org-agenda.el
# #+BEGIN_SRC emacs-lisp
# (use-package evil-org-agenda
#   :hook (org-agenda-mode . evil-org-agenda-mode)
#   :config
#   (evil-org-agenda-set-keys))
# +END_SRC

**** Generate ToC
This procedure will search for a block that begins with: '#+BEGIN: toc headlines <number>'
and ends with '#+END: toc', and insert a ToC as its content, replacing the old content.

#+BEGIN_SRC emacs-lisp
  (defun insert-org-mode-toc ()
    (interactive)
    (let ((toc-begin-re "# BEGIN_TOC \\([0-9]+\\)")
  	(toc-end-re "# END_TOC")
  	(headlines '())
  	(current-section-numbers ()))
      (save-excursion
        (goto-char (point-min))
        (if (re-search-forward toc-begin-re nil t)
  	  (let ((max-level (string-to-number (match-string 1)))
  		(toc-begin-pos (match-end 0))
  		(toc-end-pos (if (re-search-forward toc-end-re nil t)
  				 (match-beginning 0)
  			       nil)))
  	    (goto-char (point-min))
  	    (while (re-search-forward "^\\(*+\\) \\(.*\\)" nil t)
  	      (let* ((level (length (match-string 1)))
  		     (headline (match-string 2))
  		     (section-number (if (> level (length current-section-numbers))
  					 (progn
  					   (setq current-section-numbers (append current-section-numbers (list 1)))
  					   (mapconcat 'number-to-string current-section-numbers "."))
  				       (progn
  					 (setcar (nthcdr (- level 1) current-section-numbers)
  						 (+ 1 (nth (- level 1) current-section-numbers)))
  					 (setq current-section-numbers (cl-subseq current-section-numbers 0 level))
  					 (mapconcat 'number-to-string current-section-numbers "."))))
  		     (anchor (replace-regexp-in-string " " "-" (downcase (replace-regexp-in-string "[^a-zA-Z0-9 -]" "" headline)))))

  		(when (<= level max-level)
  		  (push (format "- %s [[*%s][%s]]" section-number anchor headline) headlines))))
  	    (when toc-end-pos
  	      (goto-char toc-begin-pos)
  	      (delete-region toc-begin-pos toc-end-pos)
  	      (insert "\n" (mapconcat 'identity (nreverse headlines) "\n") "\n")))
  	        (message "Warning: No # BEGIN_TOC block found.")))))
#+END_SRC
*** YAML Mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :after general
    :mode ("\\.yml\\'" . yaml-mode)
    :mode ("\\.yaml\\'" . yaml-mode)
    :hook (yaml-mode . setup-yaml-mode-keybindings)
    :config
    (defun setup-yaml-mode-keybindings()
      (my-leader-def
        :keymaps 'yaml-mode-map
        "m n" #'newline-and-indent)))
#+END_SRC

*** AGI Mode
Creates a new minor mode "agi-mode", this mode is activated on projectile.el projects which contain a
agi.yaml file in any of the parent directories of the opened buffer.

#+BEGIN_SRC emacs-lisp
  (define-minor-mode agi-mode
    "A minor mode for AGI project."
    :lighter " 🤖"
    :keymap (let ((map (make-sparse-keymap)))
              map))

  (use-package yaml
    :straight '(yaml :type git :host github :repo "zkry/yaml.el" :commit "01a12f2345d309fe86770e0a61a7f26f47a2cd0a"))

  (defun parse-agi-yaml ()
    "Parse the agi.yaml file in the project root and return the parsed content."
    (let* ((project-root (projectile-project-root))
           (agi-yaml-path (concat project-root "agi.yaml")))
      (when (and project-root (file-exists-p agi-yaml-path))
        (with-temp-buffer
          (insert-file-contents agi-yaml-path)
          (yaml-parse-string (buffer-string)
             		   :object-type 'alist
             		   :sequence-type 'list)))))

  (defun agi-command-func-generator (executable args)
    "Return a function that when called, will execute the specified EXECUTABLE with the specified ARGS."
    (lambda ()
      (interactive)
      (apply 'call-process executable nil 0 nil args)))

  (defun setup-agi-commands ()
    "Setup AGI commands from agi.yaml."
    (let ((commands-alist (cdr (assoc 'commands (parse-agi-yaml))))
          (counter 1))
      (dolist (command commands-alist)
        (when (<= counter 9)
          (let ((name (cdr (assoc 'name command)))
                (executable (cdr (assoc 'executable command)))
                (arguments (cdr (assoc 'arguments command))))
            (let ((func (agi-command-func-generator executable arguments)))
              (fset (intern (concat "agi-command-" name)) func)
              (my-leader-def
                :keymaps 'agi-mode-map
                (format "a %d" counter) (intern (concat "agi-command-" name)))
              (message "Setting up command: %s" name))
            (setq counter (1+ counter))))))
    (my-leader-def
      :keymaps 'agi-mode-map
      "a" '(:ignore t :which-key "agi")))

  (defun agi-project-p ()
    "Return non-nil if the current buffer is in an AGI project."
    (and (projectile-project-p)
         (locate-dominating-file (projectile-project-root) "agi.yaml")))

  (defun agi-mode-maybe-activate ()
    "Activate `agi-mode` if the current buffer is in an AGI project."
    (when (agi-project-p)
      (agi-mode 1)
      (setup-agi-commands)))

  (add-hook 'find-file-hook 'agi-mode-maybe-activate)
#+END_SRC

#+BEGIN_COMMENT
Initial attempts to create a custom modeline item failed, it seems to require creating a segment with doom-modeline-def-modeline and
then adding it to a modeline with doom-modeline-def-modeline, the thing is that the entire modeline with all segments seemt to be
required for the list, and it looks like doom-modeline defines several modelines 'main 'media 'pdf 'dired etc. which are displayed
for major modes?

But I want to just add a minor mode segment and idk where to add it, nothing that I've tried seems to work.

    ;; (defun +agi-mode-icon ()
    ;;   (lambda ()
    ;;     (when (bound-and-true-p agi-mode)
    ;; 	"🤖")))
    ;; ;; ;; define segment
    ;; (doom-modeline-def-segment agi-mode-segment
    ;;   (+agi-mode-icon))

    ;; ;; ;; define new modeline configuration
    ;; (doom-modeline-def-modeline 'main
    ;;   ;; left part
    ;;   '(eldoc bar workspace-name window-number modals matches follow buffer-info remote-host buffer-position word-count parrot selection-info)
    ;;   ;; right part
    ;;   (compilation objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker time agi-mode-segment) )

    ;;  ;;(defun +agi-modeline-setup-modeline-a () (
    ;;  (doom-modeline-set-modeline 'agi-modeline)))
    ;;(advice-add #'doom-modeline-auto-set-modeline :override #'+agi-modeline-setup-modeline-a)
    
    ;;:hook
    ;;(doom-modeline-mode . (lambda ()
    ;;                         (doom-modeline-set-modeline 'main 'default)))
    ;;(add-hook 'doom-modeline-mode-hook
    ;;          (lambda ()
    ;;            (doom-modeline-set-modeline 'agi-modeline 'default)))
    )
#+END_COMMENT

* On save (README.org)
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.custom/.dir-locals.el
:END:

Adds a hook on saving README.org which will do three things

1. Run formatter on this file (TODO)
2. insert-org-mode-toc to generate ToC for the README
3. org-babel-tangle to generate files
   
#+BEGIN_SRC emacs-lisp
((org-mode . ((eval . (progn
    			(defvar-local my-readme-onsave-hook-guard nil)
    			(defun my-readme-onsave-hook-payload ()
    			  (org-babel-tangle)
    			  (insert-org-mode-toc))
                          (defun my-readme-onsave-hook ()
                            "Org tangle triggers onsave again, causing an infinite loop. Place a buffer-local
                             guard to prevent recursion."
    			  (unless my-readme-onsave-hook-guard
    			    (setq my-readme-onsave-hook-guard t)
    			    (my-readme-onsave-hook-payload)
    			    (setq my-readme-onsave-hook-guard nil)))
                          (add-hook 'before-save-hook 'my-readme-onsave-hook nil t))))))
#+END_SRC
