#+PROPERTY: header-args :tangle no
#+PROPERTY: header-args:emacs-lisp+ :comments link

* Paul's Emacs
I come from Doom Emacs but it becomes very hard to trace issues when there are so many packages and opinionated configurations changing the default behaviors of packages, and I'm not sure what has changed from the defaults using distributions such as Doom. So I decided to write my own configuration from scratch, based on Doom, for instance using Doom Themes and Doom Modeline, which are very nice overall.

This file using "org-tangle" metadata, so pressing C-c C-v C-t will generate two files, early-init.el, and init.el, which are Emacs initialization files. These two files have two separate chapters in this README.org, Early Initialization and Initialization respectively.

- Package manager: use-package.el backed by straight.el
- Key bindings: evil.el configured with general.el
- Completions: vertico
  
** Early Initialization (early-init.el)
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.custom/early-init.el
:END:

To prevent package.el from loading packages prior to their init-file loading (with straight.el? What init file?)
#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
#+END_SRC

*** Garbage collection during boot
Emacs starts up with a relatively low garbage collection limit to speed up load time.
We can optimize this by increasing the limit during initialization.
#+BEGIN_SRC emacs-lisp
(setq old-gc-cons-threshold gc-cons-threshold)
(setq gc-cons-threshold most-positive-fixnum)
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold old-gc-cons-threshold)))
#+END_SRC

*** Configure straight.
Make every (use-package) also invoke straight.el making specifying ":straight t" unnecessary.

#+BEGIN_SRC emacs-lisp
(setq straight-use-package-by-default t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** Startup stats
#+BEGIN_SRC emacs-lisp
;; Startup hook from https://config.daviwil.com/emacs
(add-hook 'emacs-startup-hook
  (lambda ()
    (message "Ready for business. Startup in %s with %d gcs."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done)))
#+END_SRC

** Initialization (init.el)
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.custom/init.el
:END:
Keys are mapped using general.el in the use-project for the respective module. So nearly all packages will depend on general.el.

*** Package Manager
**** use-package.el
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
#+END_SRC
**** Built-in packages
#+BEGIN_SRC emacs-lisp
(use-package emacs
    :init
    (savehist-mode)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)

    ;; Enable recentf mode
    (recentf-mode 1)
    (setq recentf-max-menu-items 100
          recentf-max-saved-items 100)

    ;; Misc tweaks
    (menu-bar-mode -1)
    (tool-bar-mode -1))
#+END_SRC

*** Infrastructure
**** doom-themes.el
This will install Doom Themes megapack, a collection of themes. And load the doom-one theme. The (doom-themes-visual-bell-config) is documented that it may potentially not work with all modelines, but we keep it simple with doom modeline.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  :config
  (load-theme 'doom-one t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+END_SRC

**** evil.el and evil-collections.el
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+END_SRC

Depend on magit to configure evil for magit too
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after (evil magit)
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))
#+END_SRC

**** general.el
For easier key binding definitions.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :after evil
    :config
    (general-create-definer my-leader-def
      :prefix "SPC"
      :states '(normal visual))

    (my-leader-def
      "ff" 'find-file

      ;; flycheck
      "cn" 'flycheck-next-error
      "cp" 'flycheck-previous-error
      "cl" 'flycheck-list-errors

      ;; buffer
      "bd" 'kill-current-buffer))
#+END_SRC

**** projectile.el
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :after general
  :config
  (projectile-mode +1)
  (my-leader-def
   :keymaps 'projectile-mode-map
   "p" '(:ignore t :which-key "projectile")
   "p p" 'projectile-switch-project))
#+END_SRC
Also has some sort of projectile-mode-map for full projectile menu
(use-package projectile
    :bind (:map projectile-mode-map
            ("s-p" . projectile-command-map)
            ("C-c p" . projectile-command-map))))


**** doom-modeline.el
Also make sure to load the modeline after projectile since it uses the projectile api.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  (setq doom-modeline-project-detection 'projectile
        doom-modeline-buffer-file-name-style 'truncate-upto-project)
  :config
  :hook (after-init . doom-modeline-mode))
#+END_SRC

**** which-key.el
Since we're n00bs, we need to see the key options sometimes.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :after evil
  :init
  (setq which-key-idle-delay 0.4)
  :config
  (which-key-mode)
  (which-key-setup-minibuffer))
#+END_SRC

**** magit.el and magit-todos.el
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :after evil
    :config
    (my-leader-def
      "g g" 'magit-status)
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package magit-todos
  :after magit
  :custom
  (magit-todos-keyword-suffix "\\(?:([^)]+)\\)?:?" "Allow TODO without colons TODO:"))
#+END_SRC
**** dashboard.el
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    ;;:init
    ;;(setq dashboard-startup-banner '((expand-file-name "1.txt" user-emacs-directory)))
    ;;(setq dashboard-startup-banner '("/home/noname/.emacs.custom/1.txt" . ""))
    :config
    ;; Set initial buffer when creating new frames.
    ;; Note: Disabled, creates dashboard buffer when using emacsclient
    ;;(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (dashboard-setup-startup-hook))
#+END_SRC

*** Completions
**** vertico.el
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+END_SRC
**** orderless.el
Basically, we want to select items orderless instead of matching completions from beginning to end?
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC
**** consult.el and consult-flycheck.el
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :after general
    :config
    (my-leader-def
     "b b" #'consult-buffer
     "f r" #'consult-recent-file)
    ;; Re-define keys
    (general-define-key
     :prefix "C-x"
     "b" #'consult-buffer)
  )
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package consult-flycheck
  :after (consult flycheck))
#+END_SRC

*** Languages Common
**** lsp-mode.el and lsp-ui.el
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook
  (python-mode . lsp-deferred)
  :init
  (setq lsp-clients-python-command "pylsp"
        lsp-enable-snippet nil
        lsp-headerline-breadcrumb-enable nil)
  :config
  (lsp-enable-which-key-integration t))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :custom
  ;; lsp-ui-doc
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-doc-show-with-mouse nil)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-position 'at-point "Doesn't seem to work either. Childframes or WebKit frames require GUI widgets.")
  ;; lsp-ui-sideline
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-diagnostics t)
  ;; I dont' know what code actions are
  ;;(lsp-ui-sideline-show-code-actions t)
  :commands lsp-ui-mode
  :hook
  (lsp-mode . lsp-ui-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :commands company-lsp)
#+END_SRC

**** flycheck.el
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :after lsp-mode
  ;;:hook (lsp-mode . flycheck-mode)
  :init
  (setq flycheck-check-syntax-automatically '(mode-enabled save idle-change)
        flycheck-idle-change-delay 0.8)
  :config
  (global-flycheck-mode t))
#+END_SRC

*** Python
**** python.el
Is provided by emacs, so ensure nil
#+BEGIN_SRC emacs-lisp
(use-package python
  :after general
  :config
  (my-leader-def
   :keymaps 'python-mode-map
   "m" '(:ignore t :which-key "python")
   "m s" '(:ignore t :which-key "REPL")
   ;; REPL
   "m s r" '(python-shell-send-region :which-key "send region")
   "m s b" '(python-shell-send-buffer :which-key "send buffer")
   "m s f" '(python-shell-send-file :which-key "send file")))
;;:config
;; IPython REPL. I use a terminal mainly so there's no need for ipython(?)
;;(setq python-shell-interpreter "ipython"
;;      python-shell-interpreter-args "-i --simple-prompt"))
#+END_SRC

**** pyenv.el
Needs to be configured this way for some reason, as setting :hook doesn't work
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :after (modeline python)
  :init
  (add-hook 'pyvenv-post-activate-hooks #'+modeline-update-env-in-all-windows-h)
  (add-hook 'pyvenv-post-deactivate-hooks #'+modeline-clear-env-in-all-windows-h)
  :config
  (add-hook 'python-mode-local-vars-hook #'pyvenv-track-virtualenv)
  (add-to-list 'global-mode-string
               '(pyvenv-virtual-env-name (" venv:" pyvenv-virtual-env-name " "))))
#+END_SRC

**** poetry.el
Needs to be configured this way for some reason as setting :hook or :after pyvenv
doesn't activate poetry-tracking-mode
#+BEGIN_SRC emacs-lisp
(use-package poetry
  :after python
  :custom
  (poetry-tracking-strategy 'switch-buffer)
  :init
  (add-hook 'python-mode-hook #'poetry-tracking-mode))
#+END_SRC

**** pytest.el
#+BEGIN_SRC emacs-lisp
  (use-package pytest
    :after python
    :config
    (my-leader-def
      :keymaps 'python-mode-map
      "m t" '(:ignore t :which-key "pytest")
      ;; Testing
      "m t a" #'pytest-all
      "m t m" #'pytest-module
      "m t c" #'pytest-one
      "m t r" #'pytest-again
      "m t d" #'pytest-directory
      ))
#+END_SRC

*** Editors
**** org.el
    #+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-hide-leading-stars t)
  (org-hide-emphasis-markers t)
  (org-startup-indented t)
  (org-enforce-todo-dependencies t)
  ;; Defaults to showeverything, but that doesn't respect `org-hide-block-startup'
  ;; (#+startup: hideblocks)`, archive trees, hidden drawers, or VISIBILITY properties. nil
  ;; is equivalent, but respects these settings.
  (org-startup-folded nil))
    #+END_SRC
**** evil-org.el
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after (evil org)
  :hook (org-mode . evil-org-mode)
  :hook (org-capture-mode . evil-insert-state)
  :hook (doom-docs-org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook #'evil-normalize-keymaps)
  (evil-org-set-key-theme))
#+END_SRC
**** org-bullets.el
Nice bullet icons for headlines and such, supports unicode fallback
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

# +END_SRC
# **** evil-org-agenda.el
# #+BEGIN_SRC emacs-lisp
# (use-package evil-org-agenda
#   :hook (org-agenda-mode . evil-org-agenda-mode)
#   :config
#   (evil-org-agenda-set-keys))
# +END_SRC

**** helpful.el
More helpful help
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :after general
    :config
    ;; Declare
    (my-leader-def
      "h" '(:ignore t :which-key "helpful")
      "h k" '(helpful-key :which-key "describe key")
      "h m" '(describe-mode :which-key "describe mode")
      "h v" '(helpful-variable :which-key "describe variable")
      ;; describe-function includes both macros and functions, so
      ;; describe callable is a replacement that includes both
      ;; helpful-callable and helpful-macro
      "h f" '(helpful-callable :which-key "describe callable")
      "h x" '(helpful-command :which-key "describe command"))
    (general-define-key
     :prefix "C-c"
     "C-d" #'helpful-at-point)
    (general-define-key
     :prefix "C-h"
     "F" #'helpful-function)
    )
#+END_SRC

**** format-all.el
So essentially, use-package will pull an old version of format-all.el. But a new version still doesn't work for
org-mode. Doom Emacs uses a modified version that uses el-patch to format source blocks in org. one can however,
still use "C-c '", which brings up a buffer with the source code inside of the code block, the formatter should
work on this, so you press "C-c '" again in that buffer to go back to org mode with a formatted code block.

@TODO: Emulate what Doom does at some point.
#+BEGIN_SRC emacs-lisp
(straight-use-package '(format-all :type git :host github :repo "lassik/emacs-format-all-the-code"))
#+END_SRC
