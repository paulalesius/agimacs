#+PROPERTY: header-args :tangle no
#+PROPERTY: header-args:emacs-lisp+ :comments link

* Pauls Literate Emacs Config
** Early Initialization
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.custom/early-init.el
:END:

*** To prevent package.el from loading packages prior to their init-file loading (with straight.el? What init file?)
#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
(setq hello2 t)
#+END_SRC

*** Defer compilation of LISP files
When using gccemacs
#+BEGIN_SRC emacs-lisp
(setq comp-deferred-compilation t)
#+END_SRC

*** Garbage collection during boot
Emacs starts up with a relatively low garbage collection limit to speed up load time.
We can optimize this by increasing the limit during initialization.
#+BEGIN_SRC emacs-lisp
(setq old-gc-cons-threshold gc-cons-threshold)
(setq gc-cons-threshold most-positive-fixnum)
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold old-gc-cons-threshold)))
#+END_SRC

*** Configure straight.
Make every (use-package) also invoke straight.el making specifying ":straight t" unnecessary.

#+BEGIN_SRC emacs-lisp
(setq straight-use-package-by-default t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

** Initialization
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.custom/init.el
:END:

*** Infrastructure
**** use-package.el
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
#+END_SRC

**** doom-themes.el
This will install Doom Themes megapack, a collection of themes. And load the doom-one theme. The (doom-themes-visual-bell-config) is documented that it may potentially not work with all modelines, but we keep it simple with doom modeline.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  :config
  (load-theme 'doom-one t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+END_SRC

**** evil.el and evil-collections.el
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :custom
  (evil-collection-setup-minibuffer t)
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

**** projectile.el
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+END_SRC

**** doom-modeline.el
Also make sure to load the modeline after projectile since it uses the projectile api.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  (setq doom-modeline-project-detection 'projectile
        doom-modeline-buffer-file-name-style 'truncate-upto-project)
  :config
  :hook (after-init . doom-modeline-mode))
#+END_SRC

**** which-key.el
Since we're n00bs, we need to see the key options sometimes.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :after evil
  :init
  (setq which-key-idle-delay 0.4)
  :config
  (which-key-mode)
  (which-key-setup-minibuffer))
#+END_SRC

